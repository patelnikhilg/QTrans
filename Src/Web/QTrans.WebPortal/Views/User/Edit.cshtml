@model QTrans.WebPortal.Models.UserProfile

@{
    ViewBag.Title = "Edit User";
    Layout = "~/Views/Shared/_PrivateLayout.cshtml";
    var photoPath = "";
    if (Model != null)
    {
        if (Model.photo.Length > 0 && Model.photo != "NA")
        {
            photoPath = Model.photo;
        }
        else
        {
            photoPath = Model.defaultPhoto;
        }
    }
}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

    <script type="text/javascript">
        $(document).ready(function () {
            $('input[type=datetime]').datepicker({
                dateFormat: "dd/M/yy",
                changeMonth: true,
                changeYear: true,
                yearRange: "-60:+0"
            });



            $('#btnUpload').click(function () {
                // Checking whether FormData is available in browser
                var model = @Html.Raw(Json.Encode(Model));
                console.log(model.userid);
                if (window.FormData !== undefined) {

                    var fileUpload = $("#FileUpload1").get(0);
                    var files = fileUpload.files;

                    if (files.length > 0) {
                        // Create FormData object
                        var fileData = new FormData();

                        // Looping over all files and add it to FormData object
                        for (var i = 0; i < files.length; i++) {
                            fileData.append(files[i].name, files[i]);
                        }

                        // Adding one more key to FormData object
                        fileData.append('username', 'Rahul');
                        fileData.append('userid', model.userid);
                        $.ajax({
                            url: '/User/UploadFile',
                            type: "POST",
                            contentType: false, // Not to set any content header
                            processData: false, // Not to process data
                            data: fileData,
                            success: function (result) {
                                //alert(result);
                                $("#imgProfilePic").attr("src", result);
                            },
                            error: function (err) {
                                alert(err.statusText);
                            }
                        });
                    }
                    else {
                        alert("Please select file to upload");
                    }


                } else {
                    alert("FormData is not supported.");
                }
            });
        });


        function showHideFileUpload(showhide) {
            if (showhide == 'show') {
                $("#divProfileEdit").hide();
                $("#divFileUpload").show();
                //$("#divFileUpload").attr("visibility", "visible");
            }
            else {
                $("#divProfileEdit").show();
                $("#divFileUpload").hide();
                //$("#divFileUpload").attr("visibility", "hidden");
            }
        }
    </script>


    <script type="text/javascript">
        $(document).ready(function () {
            $("#CityName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "../../Common/GetCity",
                        type: "POST",
                        dataType: "json",
                        data: { Prefix: request.term },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return { label: item.CityName, value: item.CityName };
                            }))
                        }
                    })
                },
                messages: {
                    noResults: "", results: ""
                }
            });
        })
   
        $(document).ready(function () {
            $("#StateName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "../../Common/GetState",
                        type: "POST",
                        dataType: "json",
                        data: { Prefix: request.term },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return { label: item.State, value: item.State };
                            }))
                        }
                    })
                },
                messages: {
                    noResults: "", results: ""
                }
            });
        })
    </script>
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card" style="border:none">
        <div class="card-header">
            <strong>Edit User Profile</strong>
        </div>
        @if (@ViewBag.Message != null)
        {
            <div id="popupdiv" class="alert alert-success">
                @ViewBag.Message
            </div>
        }
        else if (@ViewBag.MessageFail != null)
        {
            <div id="popupdiv" class="alert alert-danger">
                @ViewBag.Message
            </div>
        }
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="card-body">
            <div class="row form-group" style="visibility:hidden;display:none; ">

                @Html.LabelFor(model => model.userid, htmlAttributes: new { @class = "form-control-label" })
                <div class="col-12 col-sm-6">
                    @Html.EditorFor(model => model.userid, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.userid) } })
                    @Html.ValidationMessageFor(model => model.userid, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="row form-group">

                    @Html.LabelFor(model => model.firstname, htmlAttributes: new { @class = "form-control-label col-md-4" })&nbsp;
                    @Html.EditorFor(model => model.firstname, new { htmlAttributes = new { @class = "form-control col-md-6", placeholder = @Html.DisplayNameFor(m => m.firstname) } })
                    @Html.ValidationMessageFor(model => model.firstname, "", new { @class = "text-danger" })
                </div>
                <div class="row form-group">

                    @Html.LabelFor(model => model.middlename, htmlAttributes: new { @class = " form-control-label col-md-4" })&nbsp;
                    @Html.EditorFor(model => model.middlename, new { htmlAttributes = new { @class = "form-control col-md-6", placeholder = @Html.DisplayNameFor(m => m.middlename) } })
                    @Html.ValidationMessageFor(model => model.middlename, "", new { @class = "text-danger" })
                </div>
                <div class="row form-group">

                    @Html.LabelFor(model => model.lastname, htmlAttributes: new { @class = " form-control-label col-md-4" })
                    @Html.EditorFor(model => model.lastname, new { htmlAttributes = new { @class = "form-control col-md-6", placeholder = @Html.DisplayNameFor(m => m.lastname) } })
                    @Html.ValidationMessageFor(model => model.lastname, "", new { @class = "text-danger" })
                </div>
                <div class="row form-group ">

                    <div class="input-group date" id="ContractStartDateDiv">
                        @Html.LabelFor(model => model.dob, htmlAttributes: new { @class = "form-control-label col-md-4" })
                        @Html.EditorFor(model => model.dob, new { htmlAttributes = new { @class = "form-control col-md-5", placeholder = "DD/MM/YYYY", autocomplete = "off", @readonly = "true" } })
                        <label class="input-group-addon btn" for="date">
                            <span class="fa fa-calendar open-datetimepicker"></span>
                        </label>
                    </div>
                    @Html.ValidationMessageFor(model => model.dob, "", new { @class = "text-danger" })
                </div>
                <div class="row form-group">
                    @Html.LabelFor(model => model.emailaddress, htmlAttributes: new { @class = "form-control-label col-md-4" })
                    @Html.EditorFor(model => model.emailaddress, new { htmlAttributes = new { @class = "form-control col-md-6", placeholder = @Html.DisplayNameFor(m => m.emailaddress) } })
                    @Html.ValidationMessageFor(model => model.emailaddress, "", new { @class = "text-danger" })
                </div>

                <div class="row form-group">
                    @Html.LabelFor(model => model.mobilenumber, htmlAttributes: new { @class = " form-control-label col-md-4" })
                    @Html.EditorFor(model => model.mobilenumber, new { htmlAttributes = new { @class = "form-control col-md-6", placeholder = @Html.DisplayNameFor(m => m.mobilenumber) } })
                    @Html.ValidationMessageFor(model => model.mobilenumber, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-lg-6">
                <div class="form-group"><img src="@photoPath" id="imgProfilePic" /></div>
                <div id="divProfileEdit">
                    <span onclick="showHideFileUpload('show')" style="cursor:pointer;"><i class="fa fa-pencil"></i></span>
                </div>
                <div id="divFileUpload" style="display:none;">
                    <input class="btn btn-sm" type="file" id="FileUpload1" />
                    <button type="button" id="btnUpload" class="btn btn-success btn-sm" onclick="showHideFileUpload('hide')">
                        <i class="fa fa-dot-circle-o"></i> Upload Photo
                    </button>
                    @*<input type="button" id="btnUpload" class="btn btn-success btn-sm" value="Upload File" onclick="showHideFileUpload('hide')" />*@
                </div>
            </div>

            <div class="col-12 form-group">
                <div style="margin-bottom:15px;"><strong>Address Details :</strong></div>
                <hr />
                <div class="row form-group">
                    @Html.LabelFor(model => model.landlinenumber, htmlAttributes: new { @class = "form-control-label  col-md-2" })
                    @Html.EditorFor(model => model.landlinenumber, new { htmlAttributes = new { @class = "form-control  col-md-3", placeholder = @Html.DisplayNameFor(m => m.landlinenumber) } })
                    @Html.ValidationMessageFor(model => model.landlinenumber, "", new { @class = "text-danger" })
                </div>

                <div class="row form-group">
                    @Html.LabelFor(model => model.addressline1, htmlAttributes: new { @class = " form-control-label  col-md-2" })
                    @Html.EditorFor(model => model.addressline1, new { htmlAttributes = new { @class = "form-control col-md-6", placeholder = @Html.DisplayNameFor(m => m.addressline1) } })
                    @Html.ValidationMessageFor(model => model.addressline1, "", new { @class = "text-danger" })
                </div>
                <div class="row form-group">
                    @Html.LabelFor(model => model.addressline2, htmlAttributes: new { @class = " form-control-label  col-md-2" })
                    @Html.EditorFor(model => model.addressline2, new { htmlAttributes = new { @class = "form-control col-md-6", placeholder = @Html.DisplayNameFor(m => m.addressline2) } })
                    @Html.ValidationMessageFor(model => model.addressline2, "", new { @class = "text-danger" })
                </div>
                <div class="row">
                    <div class="row form-group col-6">
                        @Html.LabelFor(model => model.area, htmlAttributes: new { @class = " form-control-label col-md-4" })&nbsp;&nbsp;
                        @Html.EditorFor(model => model.area, new { htmlAttributes = new { @class = "form-control col-md-6", placeholder = @Html.DisplayNameFor(m => m.area) } })
                        @Html.ValidationMessageFor(model => model.area, "", new { @class = "text-danger" })
                    </div>
                    <div class="row form-group col-6">
                        @Html.LabelFor(model => model.city, htmlAttributes: new { @class = " form-control-label col-md-4" })
                        @Html.EditorFor(model => model.city, new { htmlAttributes = new { @class = "form-control col-md-6", placeholder = @Html.DisplayNameFor(m => m.city), Id="CityName" } })
                        @Html.ValidationMessageFor(model => model.city, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="row form-group  col-6">
                        @Html.LabelFor(model => model.state, htmlAttributes: new { @class = " form-control-label col-md-4" })&nbsp;&nbsp;
                        @Html.EditorFor(model => model.state, new { htmlAttributes = new { @class = "form-control col-md-6", placeholder = @Html.DisplayNameFor(m => m.state), Id = "StateName" } })
                        @Html.ValidationMessageFor(model => model.state, "", new { @class = "text-danger" })
                    </div>
                    <div class="row form-group  col-6">
                        @Html.LabelFor(model => model.pincode, htmlAttributes: new { @class = " form-control-label col-md-4" })
                        @Html.EditorFor(model => model.pincode, new { htmlAttributes = new { @class = "form-control col-md-6", placeholder = @Html.DisplayNameFor(m => m.pincode) } })
                        @Html.ValidationMessageFor(model => model.pincode, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-12">
                <div style="margin-bottom:15px;"><strong>Identity Details:</strong></div>
                <hr />
                <div class="row">
                    <div class="form-group col-4">
                        @Html.LabelFor(model => model.pan, htmlAttributes: new { @class = " form-control-label col-md-6" })
                        @Html.EditorFor(model => model.pan, new { htmlAttributes = new { @class = "form-control col-md-8", placeholder = @Html.DisplayNameFor(m => m.pan) } })
                        @Html.ValidationMessageFor(model => model.pan, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-4">
                        @Html.LabelFor(model => model.gst, htmlAttributes: new { @class = " form-control-label col-md-6" })
                        @Html.EditorFor(model => model.gst, new { htmlAttributes = new { @class = "form-control col-md-8", placeholder = @Html.DisplayNameFor(m => m.gst) } })
                        @Html.ValidationMessageFor(model => model.gst, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group col-4">
                        @Html.LabelFor(model => model.aadhaarno, htmlAttributes: new { @class = " form-control-label col-md-6" })
                        @Html.EditorFor(model => model.aadhaarno, new { htmlAttributes = new { @class = "form-control col-md-8", placeholder = @Html.DisplayNameFor(m => m.aadhaarno) } })
                        @Html.ValidationMessageFor(model => model.aadhaarno, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
            <br />
            <div class="row form-group col-12" style="padding-left:4%">
                <button type="submit" class="btn btn-success btn-sm">
                    <i class="fa fa-dot-circle-o"></i> Submit
                </button> &nbsp;
                <button type="reset" class="btn btn-danger btn-sm">
                    <i class="fa fa-ban"></i> Cancel
                </button>
            </div>
        </div>
    </div>
}

